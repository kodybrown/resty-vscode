import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';

export class TempFileManager {
  private tempFiles: string[] = [];

  /**
   * Creates a temporary .resty file with the given YAML content
   */
  async createTempTestFile(yamlContent: string): Promise<string> {
    const tempDir = os.tmpdir();
    const timestamp = Date.now();
    const randomId = Math.random().toString(36).substr(2, 9);
    const fileName = `resty-temp-${timestamp}-${randomId}.resty`;
    const filePath = path.join(tempDir, fileName);

    // Wrap YAML content in markdown format
    const fileContent = `# Temporary Test File\n\nGenerated by Resty VSCode extension.\n\n\`\`\`yaml\n${yamlContent}\n\`\`\`\n`;

    await fs.promises.writeFile(filePath, fileContent, 'utf8');
    this.tempFiles.push(filePath);

    return filePath;
  }

  /**
   * Cleans up a specific temporary file
   */
  async cleanupFile(filePath: string): Promise<void> {
    try {
      await fs.promises.unlink(filePath);
      const index = this.tempFiles.indexOf(filePath);
      if (index > -1) {
        this.tempFiles.splice(index, 1);
      }
    } catch (error) {
      console.warn(`Failed to cleanup temp file ${filePath}:`, error);
    }
  }

  /**
   * Cleans up all tracked temporary files
   */
  async cleanup(): Promise<void> {
    const cleanupPromises = this.tempFiles.map(async (file) => {
      try {
        await fs.promises.unlink(file);
      } catch (error) {
        console.warn(`Failed to cleanup temp file ${file}:`, error);
      }
    });

    await Promise.all(cleanupPromises);
    this.tempFiles = [];
  }

  /**
   * Gets the list of tracked temporary files
   */
  getTempFiles(): string[] {
    return [...this.tempFiles];
  }
}
